import { config as envConfig } from 'dotenv';

import { mnemonicGenerate } from '@polkadot/util-crypto';

import * as Kilt from '@kiltprotocol/sdk-js';

import { generateAccount } from './generateAccount';
import { generateKeypairs } from './generateKeyPairs';

export async function createFullDid(
    submitterAccount: Kilt.KiltKeyringPair,
    mnemonic?: string
): Promise<{
    mnemonic: string;
    fullDid: Kilt.DidDocument;
}> {
    const api = Kilt.ConfigService.get('api');

    // the DID can be generated by a different mnemonic than from the account. This is also the prefered option.
    // I can also pass a specific mnemonic
    const didMnemonic = mnemonic ?? mnemonicGenerate();
    console.log("Mnemonic to generate this DID", didMnemonic);
    const { authentication, encryption, attestation, delegation } =
        generateKeypairs(didMnemonic);
    // Get tx that will create the DID on chain and DID-URI that can be used to resolve the DID Document.
    const fullDidCreationTx = await Kilt.Did.getStoreTx(
        {
            authentication: [authentication],
            keyAgreement: [encryption],
            assertionMethod: [attestation],
            capabilityDelegation: [delegation]
        },
        submitterAccount.address,
        async ({ data }) => ({
            signature: authentication.sign(data),
            keyType: authentication.type
        })
    );



    await Kilt.Blockchain.signAndSubmitTx(fullDidCreationTx, submitterAccount);

    const didUri = Kilt.Did.getFullDidUriFromKey(authentication);
    const encodedFullDid = await api.call.did.query(Kilt.Did.toChain(didUri));
    const { document } = Kilt.Did.linkedInfoFromChain(encodedFullDid);

    if (!document) {
        throw new Error('Full DID was not successfully created.');
    }

    return { mnemonic: didMnemonic, fullDid: document };
}

// Don't execute if this is imported by another file.
if (require.main === module) {
    ; (async () => {
        envConfig();

        try {
            await Kilt.connect(process.env.WSS_ADDRESS as string);

            // Load attester account
            const accountMnemonic = process.env.ATTESTER_ACCOUNT_MNEMONIC as string;
            const account = generateAccount(accountMnemonic);
            //const dAppMnemonic = process.env.ATTESTER_DID_MNEMONIC as string;
            const { mnemonic, fullDid } = await createFullDid(account);// createFullDid(account, dAppMnemonic);

            console.log('\nsave following to .env to continue\n');
            console.error(`ATTESTER_DID_MNEMONIC=${mnemonic}\n`);
            console.error(`ATTESTER_DID_URI=${fullDid.uri}\n`);


        } catch (e) {
            console.log('Error while creating attester DID');
            throw e;
        }
    })();
}